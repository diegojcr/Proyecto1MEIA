

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Diego
 */
public class NuevoUsuario extends javax.swing.JFrame {

    /**
     * Creates new form NuevoUsuario
     */
    public NuevoUsuario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtRol = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        btnBuscarFoto = new javax.swing.JButton();
        txtPath = new javax.swing.JTextField();
        txtEstatus = new javax.swing.JTextField();
        txtContra = new javax.swing.JPasswordField();
        btnRegresar = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Creación de Usuario");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Ingrese el usuario:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Ingrese el nombre:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Ingrese el apellido:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Ingrese la contraseña:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Rol:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Ingrese la fecha de nacimiento:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Ingrese el correo electrónico:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Ingrese el telefono:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Escoja una fotografía:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Estatus nuevo usuario:");

        txtUsuario.setName("txtUsuario"); // NOI18N

        txtNombre.setName("txtNombre"); // NOI18N
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtApellido.setName("txtApellido"); // NOI18N

        txtRol.setEnabled(false);
        txtRol.setName("txtRol"); // NOI18N

        txtFecha.setName("txtFecha"); // NOI18N

        txtCorreo.setName("txtCorreo"); // NOI18N

        txtTelefono.setName("txtTelefono"); // NOI18N

        btnBuscarFoto.setText("Buscar Foto");
        btnBuscarFoto.setName("btnBuscarFoto"); // NOI18N
        btnBuscarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFotoActionPerformed(evt);
            }
        });

        txtPath.setName("txtPath"); // NOI18N

        txtEstatus.setEnabled(false);
        txtEstatus.setName("txtEstatus"); // NOI18N

        txtContra.setName("txtContraseña"); // NOI18N

        btnRegresar.setText("Regresar al inicio de sesion");
        btnRegresar.setName("btnRegresar"); // NOI18N
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnRegistrar.setText("Registrar usuario");
        btnRegistrar.setName("btnRegistrar"); // NOI18N
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(188, 188, 188)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegresar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegistrar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFecha)
                            .addComponent(txtCorreo)
                            .addComponent(txtTelefono)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBuscarFoto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPath, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                            .addComponent(txtEstatus)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUsuario)
                            .addComponent(txtNombre)
                            .addComponent(txtApellido)
                            .addComponent(txtContra)
                            .addComponent(txtRol))))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtContra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(btnBuscarFoto)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtEstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegresar)
                    .addComponent(btnRegistrar))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        Acceso acceso = new Acceso();
        acceso.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnRegresarActionPerformed

    public void LeerPuntuacion(int largo, int mayusculas, int letrasIngresadas, int numerosIngresados,int simbolos, File scann) {
    
       String rutaArchivo = "C:/MEIA/puntuacion.txt";
       int puntuacion = 0;
       

       try{
           FileReader fileReader = new FileReader(rutaArchivo);
           BufferedReader bufferedReader = new BufferedReader(fileReader);

            String linea;
            int numeroDeLinea = 1;

            while ((linea = bufferedReader.readLine()) != null) {
                int numLinea = Integer.parseInt(linea);
                if(numeroDeLinea == 1){
                    
                    if(largo < numLinea){
                        JOptionPane.showMessageDialog(null, "No puede ingresar una contraseña que contenga menos de "+numLinea+" caracteres, Ingrese nuevamente");
                        break;
                    }else{
                        numeroDeLinea++;
                        continue;
                    }
                }else if(numeroDeLinea == 2){
                    puntuacion = numLinea * largo;
                    numeroDeLinea++;
                    continue;
                }else if(numeroDeLinea == 3){
                    puntuacion = puntuacion + (numLinea * mayusculas);
                    numeroDeLinea++;
                    continue;
                }else if(numeroDeLinea == 4){
                    puntuacion = puntuacion + (letrasIngresadas * numLinea);
                    numeroDeLinea++;
                    continue;
                }else if(numeroDeLinea == 5){
                    puntuacion = puntuacion + (numerosIngresados * numLinea);
                    numeroDeLinea++;
                    continue;
                }else if(numeroDeLinea == 6){
                    puntuacion = puntuacion + (simbolos * (numLinea*largo));
                    numeroDeLinea++;
                    continue;
                }else if(numeroDeLinea == 7){
                    if(letrasIngresadas == largo){
                        puntuacion = puntuacion - numLinea;
                        numeroDeLinea++;
                        continue;
                    }
                }else if(numeroDeLinea == 8){
                    if(numerosIngresados == largo){
                        puntuacion = puntuacion - numLinea;
                        numeroDeLinea++;
                        continue;
                    }
                }
                
            }
            if(puntuacion != 0){
                int total = puntuacion;
                Resultado(total,scann);
            }
            

            bufferedReader.close();
        }catch (IOException e) {
            System.err.println("Ocurrió un error al leer el archivo: " + e.getMessage());
        }
    }
    
    public void Resultado(int puntuacion,File scann){
        String rutaArchivo = "C:/MEIA/resultado.txt";

        try {
            FileReader fileReader = new FileReader(rutaArchivo);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            String linea;
            int numeroDeLinea = 1;

            while ((linea = bufferedReader.readLine()) != null) {
                String[] valores = linea.split(",");
                    int inicio = Integer.parseInt(valores[0].trim());
                    int fin = Integer.parseInt(valores[1].trim());
                    if(numeroDeLinea == 1){
                        if(puntuacion <= fin && puntuacion >= inicio){
                            JOptionPane.showMessageDialog(null, "La contraseña es insegura");
                            this.setVisible(false);
                        }
                    numeroDeLinea++;
                    continue;
                    }else if(numeroDeLinea == 2){
                        if(puntuacion <= fin && puntuacion >= inicio){
                            JOptionPane.showMessageDialog(null, "La contraseña es poco segura");
                            this.setVisible(false);
                        }
                    numeroDeLinea++;
                    continue;
                    }else if(numeroDeLinea == 3){
                        if(puntuacion <= fin && puntuacion >= inicio){
                            JOptionPane.showMessageDialog(null, "La contraseña es segura");
                            
                        }
                    numeroDeLinea++;
                    continue;
                    }else if(numeroDeLinea == 4){
                        if(puntuacion <= fin && puntuacion >= inicio){
                            JOptionPane.showMessageDialog(null, "La contraseña es muy segura");
                            
                        }
                    numeroDeLinea++;
                    continue;
                    }
                    
                    
            }

            bufferedReader.close();
        } catch (IOException e) {
            System.err.println("Ocurrió un error al leer el archivo: " + e.getMessage());
        }
    }
    
    int contBloques = 0;
    
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        try{
            String file1 = "C:/MEIA/Usuario.txt";
            String filePath = "C:/MEIA/Usuario.txt";
            
            File arch1 = new File(file1);
            File archivo = new File(filePath);
            
            
            
            if(arch1.length() == 0){
                boolean compruebaUser = false;
                boolean compruebaNombre = false;
                boolean compruebaApellido = false;
                boolean compruebaContra = false;
                boolean compruebaFecha = false;
                boolean compruebaCorreo = false;
                boolean compruebaPath = false;
            //Validacion de usuario
            String usuario = txtUsuario.getText();
            
            if(usuario.length() > 20){
                JOptionPane.showMessageDialog(null, "Error, el usuario no debe ser mayor a 20 caracteres");
            }else{
                compruebaUser = true;
            }
            //Validacion de nombre
            String nombre = txtNombre.getText();
            
            if(nombre.length() > 30){
                JOptionPane.showMessageDialog(null, "Error, el nombre no debe ser mayor a 30 caracteres");
            }else{
                compruebaNombre = true;
            }
            //Validacion de apellido
            String apellido = txtApellido.getText();
            if(apellido.length() > 30){
                JOptionPane.showMessageDialog(null, "Error, el apellido no debe ser mayor a 30 caracteres");
            }else{
                compruebaApellido = true;
            }
            //Validacion de contraseña
            String contraseña = txtContra.getText();
            int largo = contraseña.length();
            int mayusculas = 0, letrasIngresadas = 0, numerosIngresados = 0,simbolos = 0;
            for(int i = 0; i < largo;i++){
                if(contraseña.charAt(i)>= 'A' && contraseña.charAt(i) <= 'Z'){
                    mayusculas++;
                }
                if((contraseña.charAt(i) >= 'a' && contraseña.charAt(i) <= 'z') || (contraseña.charAt(i)>= 'A' && contraseña.charAt(i) <= 'Z')){
                    letrasIngresadas++;
                }
                if(contraseña.charAt(i) >= 0){
                    numerosIngresados++;
                }
                if(contraseña.charAt(i)== '/' || contraseña.charAt(i) == '¿' || contraseña.charAt(i)== '?' || contraseña.charAt(i)== '%' || contraseña.charAt(i)=='$'||contraseña.charAt(i)=='#'){
                    simbolos++;
                }

            }
            if(contraseña.length() > 40){
                JOptionPane.showMessageDialog(null, "Error, la contraseña no debe ser mayor a 40 caracteres");
            }else{
                compruebaContra = true;
            }
            LeerPuntuacion(largo, mayusculas,letrasIngresadas,numerosIngresados,simbolos,archivo);
            
            //Al ser primer usuario se le asigna automaticamente el rol de administrador
            Byte rol = 1;
            JOptionPane.showMessageDialog(null, "Primer usuario, su rol es de administrador");
            txtRol.setText(Integer.toString(rol));
            //Validacion de fecha de nacimiento
            String fecha_nacimiento = txtFecha.getText();
            String regex = "^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/\\d{4}$";
            if(fecha_nacimiento.matches(regex) == false){
                JOptionPane.showMessageDialog(null, "La fecha es incorrecta, intente de nuevo");
            }else{
                compruebaFecha = true;
            }
            
            
            //Validacion de correo electronico
            Pattern pattern = Pattern
                .compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                        + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
            String correo_electronico = txtCorreo.getText();
            Matcher mather = pattern.matcher(correo_electronico);
            if(mather.find() == false){
                JOptionPane.showMessageDialog(null, "Direccion de correo invalida");
            }else{
                compruebaCorreo = true;
            }
            //Validacion de numero telefonico
            int telefono = Integer.parseInt(txtTelefono.getText());
            //Validacion del path de fotografia
            String path_fotografia = txtPath.getText();
            if(path_fotografia.length() > 200){
                JOptionPane.showMessageDialog(null, "El path no puede ser mayor a 200 caracteres");
            }else{
                compruebaPath = true;
            }
            //Validacion para el estatus por default se ingresa como vigente
            Byte estatus = 1;
            JOptionPane.showMessageDialog(null, "El estatus es vigente");
            txtEstatus.setText(Integer.toString(estatus));
            
            String nombreArchivo = "";
            String nameArch = "";
            try{
                if(compruebaUser == true && compruebaNombre == true && compruebaApellido == true && compruebaContra == true && compruebaFecha == true
                        && compruebaCorreo == true && compruebaPath == true){
                    contBloques++;
                    nombreArchivo = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                    nameArch = "C:/MEIA/Proyecto1MEIA/usuarios.txt";
                    BufferedWriter creador = new BufferedWriter(new FileWriter(nombreArchivo, true));
                    BufferedWriter datos = new BufferedWriter(new FileWriter(nameArch, true));
                    creador.write(usuario+"|"+nombre+"|"+apellido+"|"+contraseña+"|"+rol+"|"+fecha_nacimiento+"|"+correo_electronico+"|"+telefono+"|"+path_fotografia+"|"+estatus);
                    creador.newLine();
                    creador.close();
                    datos.write(usuario+"|"+nombre+"|"+apellido+"|"+contraseña+"|"+rol+"|"+fecha_nacimiento+"|"+correo_electronico+"|"+telefono+"|"+path_fotografia+"|"+estatus);
                    datos.newLine();
                    datos.close();
                    
                    //Llenar el archivo del Usuario indizado
                    int registro = 1;
                    double posicion = 1.1;
                    int siguiente = 0;
                    FileWriter fileWriter = new FileWriter("C:/MEIA/Usuario.txt",true);
                    BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                    bufferedWriter.write(registro+"|"+posicion+"|"+usuario+"|"+siguiente+"|"+estatus);
                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    fileWriter.close();
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Error, verifique sus datos");
                }
                
            }catch (IOException e){
                e.printStackTrace();
            }
            String nombre_simbolicoBloque = "usuario_bloque"+contBloques;
            String nombre_simbolicoUsuario = "Usuario";
            Date fechaHoraActual = new Date();
            String fecha_creacion = "31/10/2023";
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String fechaHoraFormateada = formato.format(fechaHoraActual);
            String usuario_creacion = usuario;
            int contadorRegistros = 1;
            int contActivos = 1;
            int contInactivos = 0;
            int max_reorganizacion = 3, bloques = 1, inicio = 1;    
            
                try{
                    String nombreArchivoDesc = "C:/MEIA/desc_bloque"+contBloques+"_usuario"+".txt";
                    BufferedWriter creador = new BufferedWriter(new FileWriter(nombreArchivoDesc, true));
                    creador.write(nombre_simbolicoBloque+"|"+fecha_creacion+"|"+usuario_creacion+"|"+fechaHoraFormateada+"|"+usuario+"|"+contadorRegistros+"|"+contActivos+"|"+contInactivos+"|"+max_reorganizacion);
                    creador.newLine();
                    creador.close();
                    
                    FileWriter fileWriter = new FileWriter("C:/MEIA/desc_usuario.txt",true);
                    BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                    bufferedWriter.write(nombre_simbolicoUsuario+"|"+fecha_creacion+"|"+usuario+"|"+fechaHoraFormateada+"|"+usuario+"|"+contadorRegistros+"|"+contActivos+"|"+contInactivos+"|"+bloques
                    +"|"+inicio);
                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    fileWriter.close();
                    
                }catch (IOException e){
                e.printStackTrace();
            }

            
            
        //En caso ya existan usuarios dentro del archivo
        
        }else{
                String filePath5 = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                File archivo5 = new File(filePath5);
                Scanner scanner2 = new Scanner(archivo5);
                
                
                String filePath1 = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                File archivo1 = new File(filePath1);
                Scanner scanner = new Scanner(archivo1);
                boolean compruebaUser = false;
                boolean compruebaNombre = false;
                boolean compruebaApellido = false;
                boolean compruebaContra = false;
                boolean compruebaFecha = false;
                boolean compruebaCorreo = false;
                boolean compruebaPath = false;
            //Validacion de usuario
            String usuario = txtUsuario.getText();
            if(usuario.length() > 20){
                JOptionPane.showMessageDialog(null, "Error, el usuario no debe ser mayor a 20 caracteres");
            }else{
                compruebaUser = true;
            }
            //Validacion de nombre
            String nombre = txtNombre.getText();
            if(nombre.length() > 30){
                JOptionPane.showMessageDialog(null, "Error, el nombre no debe ser mayor a 30 caracteres");
            }else{
                compruebaNombre = true;
            }
            //Validacion de apellido
            String apellido = txtApellido.getText();
            if(apellido.length() > 30){
                JOptionPane.showMessageDialog(null, "Error, el apellido no debe ser mayor a 30 caracteres");
            }else{
                compruebaApellido = true;
            }
            //Validacion de contraseña
            String contraseña = txtContra.getText();
            int largo = contraseña.length();
            int mayusculas = 0, letrasIngresadas = 0, numerosIngresados = 0,simbolos = 0;
            for(int i = 0; i < largo;i++){
                if(contraseña.charAt(i)>= 'A' && contraseña.charAt(i) <= 'Z'){
                    mayusculas++;
                }
                if((contraseña.charAt(i) >= 'a' && contraseña.charAt(i) <= 'z') || (contraseña.charAt(i)>= 'A' && contraseña.charAt(i) <= 'Z')){
                    letrasIngresadas++;
                }
                if(contraseña.charAt(i) >= 0){
                    numerosIngresados++;
                }
                if(contraseña.charAt(i)== '/' || contraseña.charAt(i) == '¿' || contraseña.charAt(i)== '?' || contraseña.charAt(i)== '%' || contraseña.charAt(i)=='$'||contraseña.charAt(i)=='#'){
                    simbolos++;
                }

            }
            if(contraseña.length() > 40){
                JOptionPane.showMessageDialog(null, "Error, la contraseña no debe ser mayor a 40 caracteres");
            }else{
                compruebaContra = true;
            }
            LeerPuntuacion(largo, mayusculas,letrasIngresadas,numerosIngresados,simbolos,archivo);
            
            
            Byte rol = 0;
            //Como ya existe un usuario se busca si ya existe uno con rol de admin 
            
                while(scanner.hasNextLine()){
                    String line = scanner.nextLine();
                    String[] parts = line.split("\\|");
                    String userGuardado = parts[0].trim();
                    String contraGuardada = parts[3].trim();
                    int rolGuardado = Integer.parseInt(parts[4]);
                    if(rolGuardado == 1){
                        rol = 0;
                        JOptionPane.showMessageDialog(null, "Ya existe un administrador, se le asignara el rol de usuario");
                        String rolU = "";
                        if(rolGuardado==0){
                            rolU = "Usuario";
                        }else{
                            rolU = "Administrador";
                        }
                       }
                    
                  }
                txtRol.setText(Integer.toString(rol));
            
            
            //Validacion de fecha de nacimiento
            String fecha_nacimiento = txtFecha.getText();
            String regex = "^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/\\d{4}$";
            if(fecha_nacimiento.matches(regex) == false){
                JOptionPane.showMessageDialog(null, "La fecha es incorrecta, intente de nuevo");
            }else{
                compruebaFecha = true;
            }
            
            
            //Validacion de correo electronico
            Pattern pattern = Pattern
                .compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                        + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
            String correo_electronico = txtCorreo.getText();
            Matcher mather = pattern.matcher(correo_electronico);
            if(mather.find() == false){
                JOptionPane.showMessageDialog(null, "Direccion de correo invalida");
            }else{
                compruebaCorreo = true;
            }
            //Validacion de numero telefonico
            int telefono = Integer.parseInt(txtTelefono.getText());
            //Validacion del path de fotografia
            String path_fotografia = txtPath.getText();
            if(path_fotografia.length() > 200){
                JOptionPane.showMessageDialog(null, "El path no puede ser mayor a 200 caracteres");
            }else{
                compruebaPath = true;
            }
            //Validacion para el estatus por default se ingresa como vigente
            Byte estatus = 1;
            JOptionPane.showMessageDialog(null, "El estatus es vigente");
            txtEstatus.setText(Integer.toString(estatus));
            
            //Ingreso de datos al bloque
            
            String nombreArchivo = "";
            try{
                if(compruebaUser == true && compruebaNombre == true && compruebaApellido == true && compruebaContra == true && compruebaFecha == true
                        && compruebaCorreo == true && compruebaPath == true){
                    int contRegistrosBloque = 0;
                    while(scanner2.hasNextLine()){
                        contRegistrosBloque++;
                        scanner2.nextLine();
                    }
                    if(contRegistrosBloque >= 3){
                        JOptionPane.showMessageDialog(null, "Este bloque se encuentra lleno, se creará uno nuevo");
                        contBloques++;
                        nombreArchivo = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                        BufferedWriter creador = new BufferedWriter(new FileWriter(nombreArchivo, true));
                        creador.write(usuario+"|"+nombre+"|"+apellido+"|"+contraseña+"|"+rol+"|"+fecha_nacimiento+"|"+correo_electronico+"|"+telefono+"|"+path_fotografia+"|"+estatus);
                        creador.newLine();
                        creador.close();
                        
                        String dirUs = "C:/MEIA/Usuario.txt";
                    File arch = new File(dirUs);
                    Scanner sc = new Scanner(arch);
                    String dirBloq = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                    File archBloq = new File(dirBloq);
                    Scanner scBloq = new Scanner(archBloq);
                    int contRegistrosBloq = 0;
                    while(scBloq.hasNextLine()){
                        contRegistrosBloq++;
                        scBloq.nextLine();
                    }
                    
                    int registro = 0, contRegistrosUsuario = 0;
                    while(sc.hasNextLine()){
                        contRegistrosUsuario++;
                        registro = contRegistrosUsuario + 1;
                        sc.nextLine();
                    }
                    
                    String posicion = contBloques+"."+contRegistrosBloq;
                    
                    String archivoEntrada = "C:/MEIA/Usuario.txt";
                    FileWriter escritorIndice = new FileWriter(archivoEntrada,true);
                    BufferedWriter escInd = new BufferedWriter(escritorIndice);
                    
                    escInd.write(registro+"|"+posicion+"|"+usuario+"|"+0+"|"+estatus);
                    escInd.newLine();
                    escInd.close();
                    escritorIndice.close();
                    List<String> usuariosList = new ArrayList<>();
                    BufferedReader br = new BufferedReader(new FileReader(archivoEntrada));
                    String linea;
                    while ((linea = br.readLine()) != null) {
                        String[] partes = linea.split("\\|");
                        String nombreUsuario = partes[2];
                        usuariosList.add(nombreUsuario);
                    }
                    br.close();
                    
                    Collections.sort(usuariosList);
                    
                    String archivoGuardar = "C:/MEIA/guardar.txt";
                    BufferedWriter bw = new BufferedWriter(new FileWriter(archivoGuardar,true));
                    for(int i = 0; i < usuariosList.size(); i++){
                        String usuarioActual = usuariosList.get(i);
                        String siguienteUsuario = (i < usuariosList.size() - 1) ? usuariosList.get(i+1) : "nada";
                        bw.write(usuarioActual + "|" + siguienteUsuario +"\n");
                    }
                    bw.close();
                    //usuariosList.get(usuariosList.size() - 1).put("siguiente", "0");
                    
                    //Agregar los datos de guardado.txt en el archivo principal Usuarios.txt
                    List<Map<String, String>> lista = new ArrayList<>();
                    BufferedReader brPrincipal = new BufferedReader(new FileReader(archivoEntrada));
                    String lineaPrincipal;
                    while((lineaPrincipal = brPrincipal.readLine()) != null){
                        String[] partesPrincipal = lineaPrincipal.split("\\|");
                        Map<String, String> usu = new HashMap<>();
                        usu.put("registro", partesPrincipal[0]);
                        usu.put("posicion", partesPrincipal[1]);
                        usu.put("usuario", partesPrincipal[2]);
                        usu.put("siguiente", partesPrincipal[3]);
                        usu.put("estatus", partesPrincipal[4]);
                        lista.add(usu);
                    }
                    brPrincipal.close();
                    BufferedReader brDocumento = new BufferedReader(new FileReader(archivoGuardar));
                    String lineaDocumento;
                    while((lineaDocumento = brDocumento.readLine())!= null){
                        String[] partesDocumento = lineaDocumento.split("\\|");
                        String usuarioActualizar = partesDocumento[0];
                        String siguienteNuevo = partesDocumento[1];
                        
                        for(Map<String, String> usu : lista){
                            if(usu.get("usuario").equals(usuarioActualizar)){
                                usu.put("siguiente", siguienteNuevo);
                                break;
                            }
                            
                        }
                    }
                    brDocumento.close();
                    
                    BufferedWriter ba = new BufferedWriter(new FileWriter(archivoEntrada));
                    for(Map<String, String> usu: lista){
                        ba.write(usu.get("registro")+"|"+usu.get("posicion")+"|"+usu.get("usuario")+"|"+usu.get("siguiente")+"|"+usu.get("estatus"));
                        ba.newLine();
                    }
                    ba.close();
                        
                        
                        
                        /*
                        BufferedReader reader = new BufferedReader(new FileReader("C:/MEIA/Bitacora_usuario.txt"));
                        StringBuilder data = new StringBuilder();
                        String line;
                        while ((line = reader.readLine()) != null) {
                            // Agregar la línea a los datos a transferir
                            data.append(line).append(System.lineSeparator());
                        }
                        reader.close();
                        FileWriter writer = new FileWriter("C:/MEIA/Usuario.txt",true);
                        writer.write(data.toString());
                        writer.close();
                        FileWriter borrar = new FileWriter("C:/MEIA/Bitacora_usuario.txt",false);
                        borrar.close();
                        */
                        
                        
                        //Codigo para descriptor del usuario
               
                        String filePath2 = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                        File archivo2 = new File(filePath2);
                        Scanner scanner4 = new Scanner(archivo2);
                        String fecha_creacion = "12/10/2023";
                        Date fechaHoraActual = new Date();
                        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                        String fechaHoraFormateada = formato.format(fechaHoraActual);
                        String usuario_creacion = "";
                        int contadorRegistros = 0;
                        int contActivos = 0;
                        int contInactivos = 0;

                        while(scanner4.hasNextLine()) {
                                contadorRegistros++;
                                String salto = scanner4.nextLine();
                                String[] parts = salto.split("\\|");
                                String usuarioC = parts[0].trim();
                                int rolGuardado = Integer.parseInt(parts[4].trim());
                                int estatusGuard = Integer.parseInt(parts[9].trim());
                                if(rolGuardado == 1){
                                    usuario_creacion = usuarioC;
                                }
                                if(estatusGuard == 1){
                                    contActivos++;

                                }else{
                                    contInactivos++;
                                }
                            }
                        
                        try{
                            String nombre_simbolico = "usuario_bloque"+contBloques;
                            String nombre_simbolicoUsuario = "Usuario";
                            int max_reorganizacion = 3;
                        String nombreArchivoDesc = "C:/MEIA/desc_bloque"+contBloques+"_usuario"+".txt";
                        BufferedWriter creadorExistente = new BufferedWriter(new FileWriter(nombreArchivoDesc, false));
                        creadorExistente.write(nombre_simbolico+"|"+fechaHoraFormateada+"|"+usuario_creacion+"|"+fechaHoraFormateada+"|"+usuario+"|"+contadorRegistros+"|"+contActivos+"|"+contInactivos+"|"+max_reorganizacion);
                        creadorExistente.newLine();
                        creadorExistente.close();
                        
                        
                        FileWriter fileWriter = new FileWriter("C:/MEIA/desc_usuario.txt",true);
                            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                            bufferedWriter.write(nombre_simbolicoUsuario+"|"+fecha_creacion+"|"+usuario+"|"+fechaHoraFormateada+"|"+usuario+"|"+contadorRegistros+"|"+contActivos+"|"+contInactivos+"|"+contBloques
                            +"|"+usuario);
                            bufferedWriter.newLine();
                            bufferedWriter.close();
                            fileWriter.close();
                            
                        String nameArch = "C:/MEIA/Proyecto1MEIA/usuarios.txt";
                    BufferedWriter datos = new BufferedWriter(new FileWriter(nameArch, true));
                    datos.write(usuario+"|"+nombre+"|"+apellido+"|"+contraseña+"|"+rol+"|"+fecha_nacimiento+"|"+correo_electronico+"|"+telefono+"|"+path_fotografia+"|"+estatus);
                    datos.newLine();
                    datos.close();

                        
                    }catch (IOException e){
                    e.printStackTrace();
                }
                        
                    }else{
                    String nameArch = "C:/MEIA/Proyecto1MEIA/usuarios.txt";
                    BufferedWriter datos = new BufferedWriter(new FileWriter(nameArch, true));
                    datos.write(usuario+"|"+nombre+"|"+apellido+"|"+contraseña+"|"+rol+"|"+fecha_nacimiento+"|"+correo_electronico+"|"+telefono+"|"+path_fotografia+"|"+estatus);
                    datos.newLine();
                    datos.close();
                    
                    
                    //Codigo para llenar el Bloque que todavia no está lleno
                    
                    FileWriter fileWriter = new FileWriter("C:/MEIA/usuario_bloque"+contBloques+".txt",true);
                    BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                    bufferedWriter.write(usuario+"|"+nombre+"|"+apellido+"|"+contraseña+"|"+rol+"|"+fecha_nacimiento+"|"+correo_electronico+"|"+telefono+"|"+path_fotografia+"|"+estatus);
                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    fileWriter.close();
                    
                    //Codigo para llenar el descriptor del bloque
                    String filePath6 = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                    File archivo6 = new File(filePath6);
                    Scanner scanner6 = new Scanner(archivo6);
                    
                    Date fechaHoraActual = new Date();
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                    String fechaHoraFormateada = formato.format(fechaHoraActual);
                    String usuario_creacion = "";
                    
                    int contadorRegistros = 0;
                    int contActivos = 0;
                    int contInactivos = 0;
                    
                    while(scanner6.hasNextLine()) {
                                contadorRegistros++;
                                String salto = scanner6.nextLine();
                                String[] parts = salto.split("\\|");
                                String usuarioC = parts[0].trim();
                                int rolGuardado = Integer.parseInt(parts[4].trim());
                                int estatusGuard = Integer.parseInt(parts[9].trim());
                                if(rolGuardado == 1){
                                    usuario_creacion = usuarioC;
                                }
                                if(estatusGuard == 1){
                                    contActivos++;

                                }else{
                                    contInactivos++;
                                }
                            }
                    
                    String nombre_simbolico = "usuario_bloque"+contBloques;
                    int max_reorganizacion = 3;
                    FileWriter fileWriterDesc = new FileWriter("C:/MEIA/desc_bloque"+contBloques+"_usuario"+".txt",true);
                    BufferedWriter bufferedWriterDesc = new BufferedWriter(fileWriterDesc);
                    bufferedWriterDesc.write(nombre_simbolico+"|"+fechaHoraFormateada+"|"+usuario_creacion+"|"+fechaHoraFormateada+"|"+usuario+"|"+contadorRegistros+"|"+contActivos+"|"+contInactivos+"|"+max_reorganizacion);
                    bufferedWriterDesc.newLine();
                    bufferedWriterDesc.close();
                    fileWriterDesc.close();
                    
                    //Codigo para llenar el indiceUsuario
                    String dirUs = "C:/MEIA/Usuario.txt";
                    File arch = new File(dirUs);
                    Scanner sc = new Scanner(arch);
                    String dirBloq = "C:/MEIA/usuario_bloque"+contBloques+".txt";
                    File archBloq = new File(dirBloq);
                    Scanner scBloq = new Scanner(archBloq);
                    int contRegistrosBloq = 0;
                    while(scBloq.hasNextLine()){
                        contRegistrosBloq++;
                        scBloq.nextLine();
                    }
                    
                    int registro = 0, contRegistrosUsuario = 0;
                    while(sc.hasNextLine()){
                        contRegistrosUsuario++;
                        registro = contRegistrosUsuario + 1;
                        sc.nextLine();
                    }
                    
                    String posicion = contBloques+"."+contRegistrosBloq;
                    
                    String archivoEntrada = "C:/MEIA/Usuario.txt";
                    FileWriter escritorIndice = new FileWriter(archivoEntrada,true);
                    BufferedWriter escInd = new BufferedWriter(escritorIndice);
                    
                    escInd.write(registro+"|"+posicion+"|"+usuario+"|"+0+"|"+estatus);
                    escInd.newLine();
                    escInd.close();
                    escritorIndice.close();
                    List<String> usuariosList = new ArrayList<>();
                    BufferedReader br = new BufferedReader(new FileReader(archivoEntrada));
                    String linea;
                    while ((linea = br.readLine()) != null) {
                        String[] partes = linea.split("\\|");
                        String nombreUsuario = partes[2];
                        usuariosList.add(nombreUsuario);
                    }
                    br.close();
                    
                    Collections.sort(usuariosList);
                    
                    String archivoGuardar = "C:/MEIA/guardar.txt";
                    BufferedWriter bw = new BufferedWriter(new FileWriter(archivoGuardar,true));
                    for(int i = 0; i < usuariosList.size(); i++){
                        String usuarioActual = usuariosList.get(i);
                        String siguienteUsuario = (i < usuariosList.size() - 1) ? usuariosList.get(i+1) : "nada";
                        bw.write(usuarioActual + "|" + siguienteUsuario +"\n");
                    }
                    bw.close();
                    //usuariosList.get(usuariosList.size() - 1).put("siguiente", "0");
                    
                    //Agregar los datos de guardado.txt en el archivo principal Usuarios.txt
                    List<Map<String, String>> lista = new ArrayList<>();
                    BufferedReader brPrincipal = new BufferedReader(new FileReader(archivoEntrada));
                    String lineaPrincipal;
                    while((lineaPrincipal = brPrincipal.readLine()) != null){
                        String[] partesPrincipal = lineaPrincipal.split("\\|");
                        Map<String, String> usu = new HashMap<>();
                        usu.put("registro", partesPrincipal[0]);
                        usu.put("posicion", partesPrincipal[1]);
                        usu.put("usuario", partesPrincipal[2]);
                        usu.put("siguiente", partesPrincipal[3]);
                        usu.put("estatus", partesPrincipal[4]);
                        lista.add(usu);
                    }
                    brPrincipal.close();
                    BufferedReader brDocumento = new BufferedReader(new FileReader(archivoGuardar));
                    String lineaDocumento;
                    while((lineaDocumento = brDocumento.readLine())!= null){
                        String[] partesDocumento = lineaDocumento.split("\\|");
                        String usuarioActualizar = partesDocumento[0];
                        String siguienteNuevo = partesDocumento[1];
                        
                        for(Map<String, String> usu : lista){
                            if(usu.get("usuario").equals(usuarioActualizar)){
                                usu.put("siguiente", siguienteNuevo);
                                break;
                            }
                            
                        }
                    }
                    brDocumento.close();
                    
                    BufferedWriter ba = new BufferedWriter(new FileWriter(archivoEntrada));
                    for(Map<String, String> usu: lista){
                        ba.write(usu.get("registro")+"|"+usu.get("posicion")+"|"+usu.get("usuario")+"|"+usu.get("siguiente")+"|"+usu.get("estatus"));
                        ba.newLine();
                    }
                    ba.close();
                    //Codigo para descriptor de usuario
                    BufferedReader brFinal = new BufferedReader(new FileReader(archivoEntrada));
                    String lineaFinal;
            String primerUsuarioAlfabetico = null;
            
            while ((lineaFinal = brFinal.readLine()) != null) {
                // Dividir la línea en campos (ajusta esto según tu formato)
                String[] campos = lineaFinal.split("\\|");
                
                // Obtener el nombre del usuario (ajusta esto según tu formato)
                String nombreUsuario = campos[2];
                
                // Verificar si es el primer usuario o si es menor en orden alfabético
                if (primerUsuarioAlfabetico == null || nombreUsuario.compareTo(primerUsuarioAlfabetico) < 0) {
                    primerUsuarioAlfabetico = nombreUsuario;
                }
            }
            
            // Cerrar el archivo
            brFinal.close();
                    
                    
                    String filePaths = "C:/MEIA/desc_usuario.txt";
                    File archivo6s = new File(filePaths);
                    Scanner scanner6s = new Scanner(archivo6s); 
                    String nombre_simbolicoUsuario = "Usuario";
                    String fecha_creacion = "7/11/2023";
                    Date fechaHoraActuall = new Date();
                    SimpleDateFormat formatol = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                    String fechaHoraFormateadal = formato.format(fechaHoraActuall);
                    String usuario_mod = primerUsuarioAlfabetico;
                    int contadorRegistross = 0;
                    int contActivoss = 0;
                    int contInactivoss = 0;
                    while(scanner6s.hasNextLine()) {
                                contadorRegistros++;
                                String salto = scanner6s.nextLine();
                                String[] parts = salto.split("\\|");
                                String usuarioC = parts[0].trim();
                                int rolGuardado = Integer.parseInt(parts[5].trim());
                                int estatusGuard = Integer.parseInt(parts[6].trim());
                                if(rolGuardado == 1){
                                    usuario_creacion = usuarioC;
                                }
                                if(estatusGuard == 1){
                                    contActivos++;

                                }else{
                                    contInactivos++;
                                }
                            }
                    
                    
                    
                    FileWriter fileDesc = new FileWriter("C:/MEIA/desc_usuario.txt",true);
                            BufferedWriter buffDesc = new BufferedWriter(fileDesc);
                            buffDesc.write(nombre_simbolicoUsuario+"|"+fecha_creacion+"|"+usuario_creacion+"|"+fechaHoraFormateadal+"|"+usuario+"|"+contadorRegistross+"|"+contActivoss+"|"+contInactivoss+"|"+contBloques
                            +"|"+usuario_mod);
                            buffDesc.newLine();
                            buffDesc.close();
                            fileDesc.close();
                    
                    
                    }
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Error, verifique sus datos");
                }
            }catch (IOException e){
                e.printStackTrace();
            }
            //Descriptor para  usuario
        String nombre_simbolico = "Bitacora_usuario";
        String fecha_creacion = "12/10/2023";
        String usuario_creacion = "";
        Date fechaHoraActual = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fechaHoraFormateada = formato.format(fechaHoraActual);
        String usuario_mod = usuario;
        int contadorRegistros = 0;
        int contActivos = 0;
        int contInactivos = 0;
        /*
        while(scanner3.hasNextLine()) {
                contadorRegistros++;
                String line = scanner3.nextLine();
                String[] parts = line.split("\\|");
                String usuarioC = parts[0].trim();
                int rolGuardado = Integer.parseInt(parts[4].trim());
                int estatusGuard = Integer.parseInt(parts[9].trim());
                if(rolGuardado == 1){
                    usuario_creacion = usuarioC;
                }
                if(estatusGuard == 1){
                    contActivos++;
                    
                }else{
                    contInactivos++;
                }
            }
        
        try{
                    FileWriter fileWriter = new FileWriter("C:/MEIA/Desc_bit_usuario.txt",true);
                    BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                    bufferedWriter.write(nombre_simbolico+"|"+usuario+"|"+fechaHoraFormateada+"|"+contadorRegistros+"|"+contActivos+"|"+contInactivos);
                    bufferedWriter.newLine();
                    bufferedWriter.close();
                    fileWriter.close();
                }catch (IOException e){
                e.printStackTrace();
            }
        */
        }
            
        }catch(IOException e){
            e.printStackTrace();
        }  
        
        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnBuscarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFotoActionPerformed
        JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo JPG", "jpg");
        File ficheroImagen;
        String rutaArchivo;
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            ficheroImagen = dialogo.getSelectedFile();
            rutaArchivo = ficheroImagen.getPath();

                
            txtPath.setText(rutaArchivo);
        }
    }//GEN-LAST:event_btnBuscarFotoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NuevoUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarFoto;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JPasswordField txtContra;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtEstatus;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtRol;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
